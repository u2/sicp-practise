#lang racket
(define (make-interval a b) (cons a b))

(define (upper-bound x)
  (if (> (car x) (cdr x))
      (car x)
      (cdr x)))

(define (lower-bound x)
  (if (< (car x) (cdr x))
      (car x)
      (cdr x)))

(define (mul-interval x y)
   (let ((lbx (lower-bound x))
         (ubx (upper-bound x))
         (lby (lower-bound y))
         (uby (upper-bound y)))

  (cond
        ; (+,+)*(+,+)
        ((and (> lbx 0)
              (> ubx 0)
              (> lby 0)
              (> uby 0))
         (make-interval (* lbx lby) (* ubx uby)))

        ; (+,+)*(-,+)
        ((and (> lbx 0)
              (> ubx 0)
              (< lby 0)
              (> uby 0))
         (make-interval (* ubx lby) (* ubx uby)))

        ; (+,+)*(-,-)
        ((and (> lbx 0)
              (> ubx 0)
              (< lby 0)
              (< uby 0))
         (make-interval (* ubx lby) (* lbx uby)))

        ; (-,+)*(+,+)
        ((and (< lbx 0)
              (> ubx 0)
              (> lby 0)
              (> uby 0))
         (make-interval (* lbx uby) (* ubx uby)))

        ; (-,+)*(-,+)
        ((and (< lbx 0)
              (> ubx 0)
              (< lby 0)
              (> uby 0))
         (make-interval (min (* lbx uby) (* ubx lby)) (max (* ubx uby) (* lbx lby))))

        ; (-,+)*(-,-)
         ((and (< lbx 0)
               (> ubx 0)
               (< lby 0)
               (< uby 0))
          (make-interval (* ubx lby) (* lbx lby)))

         ; (-,-)*(+,+)
        ((and (< lbx 0)
              (< ubx 0)
              (> lby 0)
              (> uby 0))
         (make-interval (* lbx uby) (ubx lby)))

        ; (-,-)*(-,+)
         ((and (< lbx 0)
               (< ubx 0)
               (< lby 0)
               (> uby 0))
         (make-interval (* lbx uby) (lbx lby)))

         ; (-,-)*(-,-)
         ((and (< lbx 0)
               (< ubx 0)
               (< lby 0)
               (< uby 0))
         (make-interval (* ubx uby) (lbx lby)))
      )))